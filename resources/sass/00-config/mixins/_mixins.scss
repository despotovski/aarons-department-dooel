@use "sass:math";
@import "../variables/grid";

@mixin absolute-center-center {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}

@mixin absolute-right-center {
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
}

@mixin absolute-left-center {
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
}

@mixin absolute-fullsize {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

//Checking order ascending in grid breakpoint and container
@mixin _assert-ascending($map, $map-name) {
  $prev-key: null;
  $prev-num: null;

  @each $key, $num in $map {
    @if $prev-num==null {
      // Do nothing
    } @else if not comparable($prev-num, $num) {
      @warn "Potentially invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} whose unit makes it incomparable to #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    } @else if $prev-num>=$num {
      @warn "Invalid value for #{$map-name}: This map must be in ascending order, but key '#{$key}' has value #{$num} which isn't greater than #{$prev-num}, the value of the previous key '#{$prev-key}' !";
    }

    $prev-key: $key;
    $prev-num: $num;
  }
}

//Checking grid breakpoint at first array start 0
@mixin _assert-starts-at-zero($map) {
  $values: map-values($map);
  $first-value: nth($values, 1);

  @if $first-value !=0 {
    @warn "First breakpoint in `$grid-breakpoints` must start at 0, but starts at #{$first-value}.";
  }
}


/*
# name : pseudo;
# function : basic props for pseude element;
# example :
    div::after {
        @include pseudo;
        top: -1rem; left: -1rem;
        width: 1rem; height: 1rem;
    }
*/
@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

/*
# name : font-styles;
# function : basic props for pseude element;
# example :
    .header{
        @include font-style('Roboto', 20px, $red, bold, 20px. 10px )
    }
*/
@mixin font-style($family: false, $size: false, $colour: false, $weight: false, $lh: false, $ls: false) {
  @if $family {
    font-family: $family;
  }

  @if $size {
    font-size: $size;
  }

  @if $colour {
    color: $colour;
  }

  @if $weight {
    font-weight: $weight;
  }

  @if $lh {
    line-height: $lh;
  }

  @if $ls {
    letter-spacing: $ls;
  }
}

/*
# name : input-placeholder;
# function : basic props for pseude element;
# example :
    input,
    textarea {
        @include input-placeholder {
            color: $grey;
        }
    }
*/

@mixin input-placeholder {
  &::placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

/*
# name z;
# function : fix multiple z-index conflict issue;
# example :
    .site-header {
        z-index: z('site-header');
    }
*/

$z-indexes: ("outdated-browser", "modal", "site-header", "page-wrapper", "site-footer");

@function z($name) {
  @if index($z-indexes, $name) {
    @return (length($z-indexes) - index($z-indexes, $name))+1;
  } @else {
    @warn 'There is no item "#{$name}" in this list; choose one of: #{$z-indexes}';
    @return null;
  }
}

/*
# name calculate-rem;
# function : convert px to rem;
# example :
    p {
       font-size: calc-rem(12px)
    }
*/

@function calc-rem($size) {
  $remSize: math.div($size, 16px);
  @return $remSize * 1rem;
}


/*
# name retina;
# function : suport retina display;
# example :
    .logo {
        background-image: url("img/logo.png");
        @include retina("img/logo@2x.png", 100px, 21px);
    }
*/
@mixin retina($image, $width, $height) {
  @media (min--moz-device-pixel-ratio: 1.3),
  (-o-min-device-pixel-ratio: 2.6/2),
  (-webkit-min-device-pixel-ratio: 1.3),
  (min-device-pixel-ratio: 1.3),
  (min-resolution: 1.3dppx) {
    /* Serving 2x image on Retina display */
    background-image: url($image);
    background-size: $width $height;
  }
}

/*
# name keyframes;
# function : generate keyframe webkit;
# example :
    @include keyframes(animate) {
        50% {
            transform: rotate(90deg);
        }
        100% {
            transform: rotate(-90deg);
        }
    }
*/
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

/*
# name gradient;
# function : generate keyframe webkit;
# example :
    .gradient {
        @include gradient(#07c, #06f, vertical);
    }

*/
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;

  @if $orientation== "vertical" {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation== "horizontal" {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

/*
# name font-face;
# function : create font face;
# example :
    @include font-face("MyFont", "path/to/MyFont", $style: normal, $weight: normal);

*/
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src: url($file-name + ".eot?#iefix") format("embedded-opentype"), url($file-name + ".woff") format("woff"),
    url($file-name + ".ttf") format("truetype"), url($file-name + ".svg##{$font-name}") format("svg");
    font-weight: $weight;
    font-style: $style;
  }
}

/*
# name truncate-text;
# function : truncate text and make it short;
# example :
    p {
        background-color: $gray;
        color: white;
        padding: 10px 20px;
        width: 300px;
        margin: 0 auto;
        @include truncate-text;
    }

*/
@mixin truncate-text($overflow: ellipsis) {
  overflow: hidden;
  white-space: nowrap;
  text-overflow: $overflow;
}


/*
# name link-color;
# function : set hoover, active, and focus automatic;

# example :
    a {
        @include link-color($red)
    }

*/

@mixin link-color($color: "blue") {
  color: $color;

  &:hover,
  &:active,
  &:focus {
    color: lighten($color, 20%);
  }
}

/*
# name opacity;
# function : It is OK to use opacity property for modern browsers but not for IE.
So provide a filter fallback for IE8. You can set opacity from 0 (not visible) to 1
(completely visible) and filter percentage from 0 to 100. It means you can simply
multiply the value of opacity by 100 for IE filter.;

# example :
    .box {
        @include opacity(0.5);
    }

*/

@mixin opacity($opacity) {
  opacity: $opacity;
  $opacityIE: $opacity * 100;
  filter: alpha(opacity=$opacityIE);
}

@function str-replace($string, $search, $replace: "") {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
            str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

@function get-icon($icon, $color: #fff) {
  $icon: map-get($icons, $icon);
  $placeholder: "%%COLOR%%";

  $data-uri: str-replace(url($data-svg-prefix + $icon), $placeholder, $color);

  @return str-replace($data-uri, "#", "%23");
}

// TRANSITION GENERATOR
@mixin transition(
  $property: all,
  $duration: 0.3s,
  $easing: ease-in-out,
  $delay: 0s
) {
  transition-property: $property;
  transition-duration: $duration;
  transition-timing-function: $easing;
  transition-delay: $delay;

  @media (prefers-reduced-motion: reduce) {
    transition: none;
  }
}

@mixin border-top-radius($radius) {
  border-top-left-radius: $radius;
  border-top-right-radius: $radius;
}

@mixin border-right-radius($radius) {
  border-top-right-radius: $radius;
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-radius($radius) {
  border-bottom-right-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-left-radius($radius) {
  border-top-left-radius: $radius;
  border-bottom-left-radius: $radius;
}

@mixin border-top-left-radius($radius) {
  border-top-left-radius: $radius;
}

@mixin border-top-right-radius($radius) {
  border-top-right-radius: $radius;
}

@mixin border-bottom-right-radius($radius) {
  border-bottom-right-radius: $radius;
}

@mixin border-bottom-left-radius($radius) {
  border-bottom-left-radius: $radius;
}

@function theme-color($key: "primary") {
  @return map-get($theme-colors, $key);
}

// Request a theme color level
@function theme-color-level($color-name: "primary", $level: 0) {
  $color: theme-color($color-name);
  $color-base: if($level > 0, $color-black, $color-white);
  $level: abs($level);

  @return mix($color-base, $color, $level * $theme-color-interval);
}

// Tables
@mixin table-row-variant($state, $background, $border: null) {
  // Exact selectors below required to override `.table-striped` and prevent
  // inheritance to nested tables.
  .table-#{$state} {
    &,
    > th,
    > td {
      background-color: $background;
    }

    @if $border != null {
      th,
      td,
      thead th,
      tbody + tbody {
        border-color: $border;
      }
    }
  }

  // Hover states for `.table-hover`
  // Note: this is not available for cells or rows within `thead` or `tfoot`.
  .table-hover {
    @debug "color : #{$background}";
    $hover-background: darken($background, 5%);

    .table-#{$state}:hover {
      background-color: $hover-background;

      > td,
      > th {
        background-color: $hover-background;
      }
    }
  }
}


@mixin reset-text() {
  font-family: $font-poppins;
  // We deliberately do NOT reset font-size or word-wrap.
  font-style: normal;
  font-weight: normal;
  line-height: 1.5;
  text-align: left; // Fallback for where `start` is not supported
  text-align: start;
  text-decoration: none;
  text-shadow: none;
  text-transform: none;
  letter-spacing: normal;
  word-break: normal;
  word-spacing: normal;
  white-space: normal;
  line-break: auto;
}

@function subtract($value1, $value2, $return-calc: true) {
  @if $value1 == null and $value2 == null {
    @return null;
  }

  @if $value1 == null {
    @return -$value2;
  }

  @if $value2 == null {
    @return $value1;
  }

  @if type-of($value1) == number and type-of($value2) == number and comparable($value1, $value2) {
    @return $value1 - $value2;
  }

  @return if($return-calc == true, calc(#{$value1} - #{$value2}), $value1 + unquote(" - ") + $value2);
}

@mixin gradient-striped($color: rgba(#fff, .15), $angle: 45deg) {
  background-image: linear-gradient($angle, $color 25%, transparent 25%, transparent 50%, $color 50%, $color 75%, transparent 75%, transparent);
}

//Button mixins
@mixin base-button($color: #000000, $background-color : #ffffff, $border-color: #ffffff, $ghost:false) {
  border-radius: $border-radius ;
  color: $color;
  background-color: $background-color;
  border: 2px solid $border-color;
  transition: all .3s ease;

  &:disabled,
  &.btn-disabled {
      border-color: lighten(desaturate(adjust-hue($color-blue-light, -1), 30.25), 30.00);
      background-color:lighten(desaturate(adjust-hue($color-blue-light, -1), 30.25), 30.00);
  }

  &:focus {
    outline: none;
  }
}

// SELECT ELEMENT STYLE
@mixin customSelect($class-prefix) {
  #{$class-prefix}__control {
    min-height: calc-rem(48px);
    border-radius: $border-radius ;
    border: 2px solid $color-light-gray;
    background-color: #fff;
    font: 500 calc-rem(12px) $font-poppins;
    color: $color-gray-1;
    box-shadow: none;
    cursor: pointer;

    &:hover{
      border-color: $color-light-gray;
    }

    &--menu-is-open {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  #{$class-prefix}__value-container {
    padding: 0 1.5rem 0 calc-rem(10px);
  }

  #{$class-prefix}__indicator-separator {
    display: none;
  }

  #{$class-prefix}__dropdown-indicator {
    color: $color-primary;
    padding: 0 calc-rem(8px);
  }

  #{$class-prefix}__placeholder {
    color: $color-gray-1;
  }

  &__single-value {
    padding-right: calc-rem(20px);
  }

  #{$class-prefix}__input {
    margin: -6px -3px;
  }

  #{$class-prefix}__menu {
    border: 2px solid $color-light-gray;
    border-top: 0;
    box-shadow: none;
    border-radius: 0;
    margin-top: -2px;
    padding-top: 10px;
    z-index: 10;
  }

  #{$class-prefix}__option {
    padding: calc-rem(12px);
    font-size: calc-rem(12px);
    color: $color-gray-1;

    &--is-focused {
      background-color: $color-primary-table-border;
    }

    &--is-selected {
      background-color: $color-primary;
      color: $color-white;
    }
  }
}

@mixin customSelectMulti($class-prefix) {
  #{$class-prefix}__control {
    min-height: calc-rem(48px);
    border-radius: $border-radius ;
    border: 2px solid $color-light-gray;
    background-color: #fff;
    color: $color-gray-1;
    font: 500 calc-rem(12px) $font-poppins;
    line-height: 14px;
    letter-spacing: 0.4px;
    box-shadow: none;
    cursor: pointer;

    &:hover{
      border-color: $color-light-gray;
    }

    &--menu-is-open {
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }
  }

  #{$class-prefix}__value-container {
    padding: 0 1.5rem 0 calc-rem(10px);
  }

  #{$class-prefix}__indicator-separator {
    display: none;
  }

  #{$class-prefix}__dropdown-indicator {
    color: $color-primary;
    padding: 0 calc-rem(8px);
  }

  #{$class-prefix}__placeholder {
    color: $color-gray-1;
  }

  #{$class-prefix}__input {
    margin: -6px -3px;
  }

  #{$class-prefix}__menu {
    border: 2px solid $color-light-gray;
    border-top: 0;
    box-shadow: none;
    border-radius: 0;
    border-bottom-left-radius: calc-rem(12px);
    border-bottom-right-radius: calc-rem(12px);
    margin: 0;
    margin-top: -2px;
    padding-top: 10px;
  }

  #{$class-prefix}__option {
    position: relative;
    display: flex;
    align-items: center;
    padding: calc-rem(16px);
    font-size: calc-rem(12px);
    color: $color-gray-1;

    &::before {
      content: "";
      width: calc-rem(20px);
      height: calc-rem(20px);
      border: 2px solid #C9CBCE;
      background-color: #FFFFFF;
      margin-right: calc-rem(14px);
    }

    &--is-focused {
      background-color: $color-primary-table-border;
    }

    &--is-selected {
      background-color: $color-primary;
      color: $color-white;

      &::before {
        background-color: $color-light-gray-2;
        border-color: $color-gray-1;
      }

      &:after {
        content: "";
        position: absolute;
        border: solid white;
        border-width: 0 2px 2px 0;
        transform: rotate(45deg);
        width: 6px;
        height: 10px;
        left: 23px;
        top: 19px;
      }
    }
  }

  #{$class-prefix}__input {
    margin: -6px -3px;
  }

  /* Scroll Bar */
  #{$class-prefix}__menu-list::-webkit-scrollbar {
    width: 4px;
    height: 0;
  }
  #{$class-prefix}__menu-list::-webkit-scrollbar-track {
    background: #f1f1f1;
  }
  #{$class-prefix}__menu-list::-webkit-scrollbar-thumb {
    background: $color-primary;
  }
  #{$class-prefix}__menu-list::-webkit-scrollbar-thumb:hover {
    background: $color-primary;
  }
}

// FONT FACE GENERATOR
@mixin font-face(
  $font-name,
  $file-name,
  $weight: normal,
  $style: normal,
  $font-display: swap
) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + ".eot");
    src: url($file-name + ".eot?#iefix") format("embedded-opentype"),
      url($file-name + ".ttf") format("truetype"),
      url($file-name + ".woff2") format("woff2"),
      url($file-name + ".woff") format("woff");
    font-weight: $weight;
    font-style: $style;
    font-display: $font-display;
  }
}

//////////////////////////////////////////////////////////////////
// RANGE INPUT
//////////////////////////////////////////////////////////////////
@mixin shadow($shadow-size, $shadow-blur, $shadow-color) {
  box-shadow: $shadow-size $shadow-size $shadow-blur $shadow-color, 0 0 $shadow-size lighten($shadow-color, 5%);
}

@mixin track {
  height: $track-height;
  width: $track-width;
  transition: all .2s ease;
  cursor: pointer;
}

@mixin thumb {
  //@include shadow($thumb-shadow-size, $thumb-shadow-blur, $thumb-shadow-color);
  height: $thumb-height;
  width: $thumb-width;
  background: $thumb-color;
  border: $thumb-border-width solid $thumb-border-color;
  border-radius: $thumb-radius;
  box-sizing: border-box;
  cursor: pointer;
}

// @function inversedValueChange($value, $base: 100) {
//   $baseLogarithm: math.log($base + 1);
//   $inputValueLogarithm: math.log($value + 1);
//   $result: calc($base / ($base * $baseLogarithm) * $inputValueLogarithm);
//   @return $result;
// }